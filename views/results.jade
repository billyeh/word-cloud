head 
  link(rel='stylesheet' type='text/css' href='//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css')
  script(src='//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js')
  script(src='//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js')
  script(src='http://d3js.org/d3.v3.min.js')
  script(src='http://d3js.org/topojson.v1.min.js')
  style.
    .overlay {
      fill: none;
      pointer-events: all;
    }

    .land {
      fill: #DDD;
    }

    .boundary {
      fill: none;
      stroke: #fff;
      stroke-linejoin: round;
      stroke-linecap: round;
    }
    circle {
      stroke: #333;
    }

    ::-webkit-scrollbar {
        height: 12px;
        width: 5px;
        background: #BBB;
    }
    ::-webkit-scrollbar-thumb {
        background: #393812;
        -webkit-border-radius: 1ex;
        -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);
    }
    ::-webkit-scrollbar-corner {
        background: #000;
    }
    .alert {
      padding: 1px !important;
      margin-bottom: 5px;
    }
    .panel-title {
      font-size: inherit !important;
    }
    h3 {
      display: inline-block;
      margin-top:0px;
    }
    #show-all {
      cursor: pointer; !important
    }
    #title {
        padding-bottom: 15px;
        padding-left: 5px;
    }
    #bar-graph {
        font: 10px sans-serif;
        background-color: steelblue;
        text-align: right;
        padding: 3px;
        margin: 1px;
        color: white;
    }
body
  div(id="title", align='left')
    span
      span(style="font-size:45px;") Word
      span(style="color:3AA9E8; font-size:45px;") Cloud
    div(style="float:right;padding-top:17px;padding-right:3px;")
      form(action='search', method='post')
          div.input-group
            input(class='form-control', autofocus='autofocus', type='text', name='querystring', style='width: 400px;vertical-align:top;')
            button(style='line-height:2;vertical-align:top;', id='search', type='submit', value='Search', name='firstbutton') Search
  div.col-md-3(style="max-height:750px;overflow-y:scroll;overflow-x:hidden;bottom:10px;right:10px;")
    h3 Sentimental Tweets
    span(style='float:right;margin-top:5px;', id='show-all') Show all
    div#left-side(style="padding:10px;")
    - var tweets = JSON.parse(data)
    - var already_displayed = {}
    div.panel-group#accordion
      each t in tweets
        if !already_displayed[t.id]
          - already_displayed[t.id] = true
          if t.sentiment == 4
            - var alert = 'success'
          if t.sentiment == 0
            - var alert = 'danger'
          if t.sentiment == 2
            - var alert = 'info'
          div(class='alert alert-'+alert)
              div.panel-heading.panel-title
                a(class='accordion-toggle', data-toggle='collapse', data-parent='#accordion', href= '#'+t.id)= t.name
                span(style="float:right;")= t.time
              div(id= t.id, class='panel-collapse collapse')
                div.panel-body
                  p!= t.text
    p(style='display:none', id='sentimentCount')= JSON.stringify(sentimentCount)
    script.
        var chart = d3.select("#left-side").insert("div")
                    .attr("id", "bar-graph");
        var data = JSON.parse($('p#sentimentCount').text());
        console.log(typeof data);
        chart.selectAll("div").data(data).enter()
             .append("div").style("width", function(d) {return d*5 + "px";})
             .text(function(d) {return d;});


  div#right-side
    script.
      var width = 960,
      height = 400;

      var projection = d3.geo.mercator()
          .translate([0, 0])
          .scale(width / 2 / Math.PI);

      var zoom = d3.behavior.zoom()
          .scaleExtent([1, 8])
          .on("zoom", move);

      var path = d3.geo.path()
          .projection(projection);

      var svg = d3.select("#right-side").append("svg")
          .attr("width", width)
          .attr("height", height)
        .append("g")
          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
          .call(zoom);

      var g = svg.append("g");

      svg.append("rect")
          .attr("class", "overlay")
          .attr("x", -width / 2)
          .attr("y", -height / 2)
          .attr("width", width)
          .attr("height", height);

      d3.json("/world-50m.json", function(error, world) {
        g.append("path")
            .datum(topojson.feature(world, world.objects.countries))
            .attr("class", "land")
            .attr("d", path);

        g.append("path")
            .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
            .attr("class", "boundary")
            .attr("d", path);
      });

      function move() {
        var t = d3.event.translate,
            s = d3.event.scale;
        t[0] = Math.min(width / 2 * (s - 1), Math.max(width / 2 * (1 - s), t[0]));
        t[1] = Math.min(height / 2 * (s - 1) + 230 * s, Math.max(height / 2 * (1 - s) - 230 * s, t[1]));
        zoom.translate(t);
        g.style("stroke-width", 1 / s).attr("transform", "translate(" + t + ")scale(" + s + ")");
      }
    script(type='text/javascript' src='//www.google.com/trends/embed.js?hl=en-US&q='+q+'&cmpt=q&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=960&h=350')

    script.
      $('#show-all').click(function() {
        $('a.accordion-toggle').click();
      });

  p(style='display:none', id='data')= JSON.stringify(grouped)

  script.
    var data = JSON.parse($('p#data').text());
    var projection = d3.geo.mercator()
          .translate([0, 0])
          .scale(width / 2 / Math.PI);
    var svg = d3.select('svg');
    svg.append("text")
        .attr("x", (0))             
        .attr("y", 15)
        .style("font-size", "13px") 
        .style('font-color', '#444')
        .text("Tweets Grouped by Region and Overall Sentiment of Region");
    svg.selectAll("circles")
          .data(data)
        .enter()
          .append("circle")
          .attr("r", function(d) {
              return 4*Math.sqrt(d.size);
          })
          .style("fill", function(d) {
              if (d.sentiment / d.size > 2) {
                  return 'rgb(70, 136, 71)';
              }
              else if (d.sentiment / d.size < 2) {
                  return 'rgb(185, 74, 72)';
              }
              else {
                  return '#3a87ad';
              }
          })
          .on('mouseover', function() {
            d3.select(this).style('stroke-width: 2px;')
          })
          .attr("transform", function(d) {
              var coords = projection([d.coordinates[1], d.coordinates[0]]);
              return "translate(" + (coords[0] + 480) + "," + (coords[1] + 200) + ")";})
          .append("svg:title")
          .text(function(d) { 
              if (!d.hashtags) {
                return "Hashtags: None";
              }
              return "Hashtags:" + d.hashtags; });
